package order

import (
	"github.com/go-chi/chi"
	"github.com/go-chi/render"
	"net/http"
	"../db"
)

type Order struct {
	Symbol string  `json:"symbol"`
	ID     string  `json:"id"`
	Side   string  `json:"side"`
	Size   int     `json:"size"`
	Price  float64 `json:"price"`
}

type AutoGenerated struct {
	Total   int `json:"total"`
	Page    int `json:"page"`
	PerPage int `json:"perPage"`
	Records []struct {
		Order struct {
			MakerAddress          string `json:"makerAddress"`
			TakerAddress          string `json:"takerAddress"`
			MakerAssetData        string `json:"makerAssetData"`
			TakerAssetData        string `json:"takerAssetData"`
			FeeRecipientAddress   string `json:"feeRecipientAddress"`
			ExchangeAddress       string `json:"exchangeAddress"`
			SenderAddress         string `json:"senderAddress"`
			MakerAssetAmount      string `json:"makerAssetAmount"`
			TakerAssetAmount      string `json:"takerAssetAmount"`
			MakerFee              string `json:"makerFee"`
			TakerFee              string `json:"takerFee"`
			ExpirationTimeSeconds string `json:"expirationTimeSeconds"`
			Salt                  string `json:"salt"`
			Signature             string `json:"signature"`
		} `json:"order"`
		MetaData struct {
			Hash                      string `json:"hash"`
			FeeRate                   int    `json:"feeRate"`
			Status                    int    `json:"status"`
			TakerAssetAmountRemaining string `json:"takerAssetAmountRemaining"`
		} `json:"metaData"`
	} `json:"records"`
}



var source *db.Db

func Routes(db *db.Db) *chi.Mux {
	source = db
	router := chi.NewRouter()
	router.Get("/{orderID}", GetOrder)
	router.Delete("/{orderID}", CancelOrder)
	router.Post("/", CreateOrder)
	return router
}

func GetOrder(w http.ResponseWriter, r *http.Request) {
	orderID := chi.URLParam(r, "orderID")

	source.Exec("SElect Order from FB where orderID = OrderID")

	order := Order{
		Symbol:  "WETH-USD",
		ID: orderID,
		Side: "Sell",
		Size:  100 ,
		Price: 120.32,
	}
	render.JSON(w, r, order) // A chi router helper for serializing and returning json
}

func CancelOrder(w http.ResponseWriter, r *http.Request) {
	orderID := chi.URLParam(r, "orderID")
	order := Order{
		Symbol:  "WETH-USD",
		ID: orderID,
		Side: "Sell",
		Size:  0 ,
		Price: 120.32,
	}
	render.JSON(w, r, order) // A chi router helper for serializing and returning json
}


func CreateOrder(w http.ResponseWriter, r *http.Request) {
	response := make(map[string]string)
	response["message"] = "Created order successfully"
	render.JSON(w, r, response) // Return some demo response
}

